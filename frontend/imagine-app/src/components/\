import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  ProjectItem,
  ProjectLabel,
  ProjectName,
  ProjectDescription,
  ProjectDates,
  ProjectStatus,
  DetailLabel,
  ProjectSection,
  ProjectDeleteButton,
  ProjectSearchInput,
} from "./ProjectStyledComponents";
import UpdateProjectModal from "./UpdateProjectModal";

const ProjectList = () => {
  const [projects, setProjects] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [showUpdateModal, setShowUpdateModal] = useState(false);
  const [selectedProject, setSelectedProject] = useState(null);

  const fetchProjects = () => {
    axios
      .get("/projects")
      .then((response) => {
        setProjects(response.data);
      })
      .catch((error) => {
        console.error("Error fetching projects:", error);
      });
  };

  useEffect(() => {
    fetchProjects();
  }, []);

  const deleteProject = (projectId) => {
    axios
      .delete(`/projects/${projectId}`)
      .then(() => {
        setProjects(projects.filter((project) => project.id !== projectId));
        alert("Project deleted successfully");
      })
      .catch((error) => {
        console.error("Error deleting project:", error);
        alert(
          `Failed to delete project: ${
            error.response ? error.response.data.detail : "No server response"
          }`,
        );
      });
  };

  // Function to open the modal and pass the selected project
  const openUpdateModal = (project) => {
    setSelectedProject(project);
    setShowUpdateModal(true);
  };

  // Function to handle closing the modal and refreshing the project list
  const handleModalClose = () => {
    setShowUpdateModal(false);
    fetchProjects(); // Refresh the projects list after updating
  };

  // Filter projects based on the search query
  const filteredProjects = projects.filter((project) =>
    project.name.toLowerCase().includes(searchQuery.toLowerCase()),
  );

  return (
    <div>
      {/* Search Input */}
      <ProjectSearchInput
        type="text"
        placeholder="Search projects by name"
        value={searchQuery}
        onChange={(e) => setSearchQuery(e.target.value)}
      />

      {/* Filtered project list */}
      {filteredProjects.length > 0 ? (
        filteredProjects.map((project) => (
          <ProjectSection key={project.id}>
            <ProjectItem onClick={() => openUpdateModal(project)}>
              <ProjectName>
                <DetailLabel>Name:</DetailLabel> {project.name}
              </ProjectName>
              <ProjectDescription>
                <DetailLabel>Description:</DetailLabel> {project.description}
              </ProjectDescription>
              <ProjectDates>
                <DetailLabel>Dates:</DetailLabel> {project.startDate} -{" "}
                {project.endDate}
              </ProjectDates>
              <ProjectStatus>
                <DetailLabel>Status:</DetailLabel> {project.status}
              </ProjectStatus>
              {/* Prevent the delete button click from opening the update modal */}
              <ProjectDeleteButton
                onClick={(e) => {
                  e.stopPropagation(); // Stop the event from bubbling up
                  deleteProject(project.id);
                }}
              >
                Delete
              </ProjectDeleteButton>
            </ProjectItem>
          </ProjectSection>
        ))
      ) : (
        <p>No projects found.</p>
      )}

      {/* Update Project Modal */}
      {showUpdateModal && selectedProject && (
        <UpdateProjectModal
          project={selectedProject}
          onClose={handleModalClose}
        />
      )}
    </div>
  );
};

export default ProjectList;
